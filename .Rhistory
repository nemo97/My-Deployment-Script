)
#pdf("plots.pdf")
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name,colour=cus.color)) + geom_line(size = 6) + xlab(paste("Time line ",as.Date(rds21dl.df[1,1]))) + ylab("Batch Job:Step Name") + scale_x_datetime(breaks = date_breaks("1 hours"),labels = tvtime_format()) +guides(colour=FALSE)
#text("testing")
#print(p)
#dev.off()
args=(commandArgs(TRUE))
start.date = format(Sys.Date()-1, "%Y-%m-%d")
end.date = format(Sys.Date(), "%Y-%m-%d")
if(length(args)==0){
print("No arguments supplied.")
##supply default values
start.date = format(Sys.Date()-1, "%Y-%m-%d")
end.date = format(Sys.Date(), "%Y-%m-%d")
}else{
start.date="2015-11-23"
start.date="2015-11-24"
}
#start.date ="2015-11-23"
#end.date ="2015-11-24"
tvtime_format<-function() {
function(x) {
v<-character(length(x))
notNA<-!is.na(x)
lt <- as.POSIXlt(x[notNA])
hour <- lt$hour
min <- lt$min
v[notNA]<-sprintf("%02d:%02d", hour, min)
v
}
}
library(RMySQL)
#mydb = dbConnect(MySQL(), user='gatuser', password='gatuser', dbname='gatmgr2', host='10.8.7.63')
mydb = dbConnect(MySQL(), user='gatread', password='gatread_PP', dbname='gatmgr', host='10.201.1.48')
rs21dl = dbSendQuery(mydb, paste("SELECT se.start_time, se.end_time, CONCAT(LEFT(ji.job_name,30),' :',LEFT(se.step_name,25)),
ji.job_name color
FROM cas_spr_step_execution se,cas_spr_job_execution je,`cas_spr_job_instance` ji
WHERE
se.`job_execution_id` = je.`job_execution_id`
AND ji.`job_instance_id` = je.`job_instance_id`
AND TIME_TO_SEC(TIMEDIFF(se.end_time , se.start_time)) > 500
AND se.start_time > '",start.date, " 18:00:00' AND se.start_time < '",end.date ," 2:00:00'
AND LOWER(se.step_name) NOT LIKE '%master%'
AND LOWER(se.step_name) NOT LIKE '%nightly%'
ORDER BY se.start_time",sep=' '))
#rs25dl = dbSendQuery(mydb, "")
rds21dl.df <- fetch(rs21dl,n=-1)
#rds21dl.df <- fetch(rs25dl,n=-1)
dbClearResult(dbListResults(mydb)[[1]])
# close db connection
dbDisconnect(mydb)
# load libs
library(reshape2)
library(ggplot2)
library(scales)
#rds21dl.df <- rbind(rds21dl.df,rds25dl.df)
tasks <- rds21dl.df[,3]
dfr <- data.frame(
name        = factor(tasks, levels = tasks),
start.date  = as.POSIXlt(rds21dl.df[,1]),
end.date    = as.POSIXlt(rds21dl.df[,2]),
cus.color = rds21dl.df[,4]
)
#pdf("plots.pdf")
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name,colour=cus.color)) + geom_line(size = 6) + xlab(paste("Time line ",as.Date(rds21dl.df[1,1]))) + ylab("Batch Job:Step Name") + scale_x_datetime(breaks = date_breaks("1 hours"),labels = tvtime_format()) +guides(colour=FALSE)
#text("testing")
#print(p)
#dev.off()
args=(commandArgs(TRUE))
start.date = format(Sys.Date()-1, "%Y-%m-%d")
end.date = format(Sys.Date(), "%Y-%m-%d")
if(length(args)==0){
print("No arguments supplied.")
##supply default values
start.date = format(Sys.Date()-1, "%Y-%m-%d")
end.date = format(Sys.Date(), "%Y-%m-%d")
}else{
start.date="2015-11-23"
start.date="2015-11-24"
}
start.date ="2015-11-23"
end.date ="2015-11-24"
tvtime_format<-function() {
function(x) {
v<-character(length(x))
notNA<-!is.na(x)
lt <- as.POSIXlt(x[notNA])
hour <- lt$hour
min <- lt$min
v[notNA]<-sprintf("%02d:%02d", hour, min)
v
}
}
library(RMySQL)
#mydb = dbConnect(MySQL(), user='gatuser', password='gatuser', dbname='gatmgr2', host='10.8.7.63')
mydb = dbConnect(MySQL(), user='gatread', password='gatread_PP', dbname='gatmgr', host='10.201.1.48')
rs21dl = dbSendQuery(mydb, paste("SELECT se.start_time, se.end_time, CONCAT(LEFT(ji.job_name,30),' :',LEFT(se.step_name,25)),
ji.job_name color
FROM cas_spr_step_execution se,cas_spr_job_execution je,`cas_spr_job_instance` ji
WHERE
se.`job_execution_id` = je.`job_execution_id`
AND ji.`job_instance_id` = je.`job_instance_id`
AND TIME_TO_SEC(TIMEDIFF(se.end_time , se.start_time)) > 500
AND se.start_time > '",start.date, " 18:00:00' AND se.start_time < '",end.date ," 2:00:00'
AND LOWER(se.step_name) NOT LIKE '%master%'
AND LOWER(se.step_name) NOT LIKE '%nightly%'
ORDER BY se.start_time",sep=' '))
#rs25dl = dbSendQuery(mydb, "")
rds21dl.df <- fetch(rs21dl,n=-1)
#rds21dl.df <- fetch(rs25dl,n=-1)
dbClearResult(dbListResults(mydb)[[1]])
# close db connection
dbDisconnect(mydb)
# load libs
library(reshape2)
library(ggplot2)
library(scales)
#rds21dl.df <- rbind(rds21dl.df,rds25dl.df)
tasks <- rds21dl.df[,3]
dfr <- data.frame(
name        = factor(tasks, levels = tasks),
start.date  = as.POSIXlt(rds21dl.df[,1]),
end.date    = as.POSIXlt(rds21dl.df[,2]),
cus.color = rds21dl.df[,4]
)
#pdf("plots.pdf")
mdfr <- melt(dfr, measure.vars = c("start.date", "end.date"))
ggplot(mdfr, aes(value, name,colour=cus.color)) + geom_line(size = 6) + xlab(paste("Time line ",as.Date(rds21dl.df[1,1]))) + ylab("Batch Job:Step Name") + scale_x_datetime(breaks = date_breaks("1 hours"),labels = tvtime_format()) +guides(colour=FALSE)
#text("testing")
#print(p)
#dev.off()
ggplot(mdfr, aes(value, name,colour=cus.color)) + geom_line(size = 6) + xlab(paste("Time line ",as.Date(rds21dl.df[1,1]))) + ylab("Batch Job:Step Name") + scale_x_datetime(breaks = date_breaks("1 hours"),labels = tvtime_format()) +guides(colour=FALSE)
library(reshape2)
library(ggplot2)
library(scales)
library(sendmailR)
ggplot(mdfr, aes(value, name,colour=cus.color)) + geom_line(size = 6) + xlab(paste("Time line ",as.Date(rds21dl.df[1,1]))) + ylab("Batch Job:Step Name") + scale_x_datetime(breaks = date_breaks("1 hours"),labels = tvtime_format()) +guides(colour=FALSE)
View(mdfr)
View(dfr)
View(dfr)
help(png)
qplot(start_time,read_count,data=topStepsData.df,color=step_name)
library(ggplot2)
qplot(start_time,read_count,data=topStepsData.df,color=step_name)
args=(commandArgs(TRUE))
start.date = format(Sys.Date()-1, "%Y-%m-%d")
end.date = format(Sys.Date(), "%Y-%m-%d")
if(length(args)==0){
print("No arguments supplied.")
##supply default values
start.date = format(Sys.Date()-1, "%Y-%m-%d")
end.date = format(Sys.Date(), "%Y-%m-%d")
}else{
start.date="2015-11-23"
start.date="2015-11-24"
}
#start.date ="2015-11-27"
#end.date ="2015-11-28"
#setwd("C:/reports")
tvtime_format<-function() {
function(x) {
v<-character(length(x))
notNA<-!is.na(x)
lt <- as.POSIXlt(x[notNA])
hour <- lt$hour
min <- lt$min
v[notNA]<-sprintf("%02d:%02d", hour, min)
v
}
}
library(RMySQL)
#mydb = dbConnect(MySQL(), user='gatuser', password='gatuser', dbname='gatmgr2', host='10.8.7.63')
mydb = dbConnect(MySQL(), user='gatread', password='gatread_PP', dbname='gatmgr', host='10.201.1.48')
top15steps = dbSendQuery(mydb, paste("SELECT se.start_time, se.end_time, CONCAT(LEFT(ji.job_name,30),' :',LEFT(se.step_name,25)),
ji.job_name color
FROM cas_spr_step_execution se,cas_spr_job_execution je,`cas_spr_job_instance` ji
WHERE
se.`job_execution_id` = je.`job_execution_id`
AND ji.`job_instance_id` = je.`job_instance_id`
AND se.start_time > '",start.date, " 18:00:00' AND se.start_time < '",end.date ," 2:00:00'
AND LOWER(se.step_name) NOT LIKE '%master%'
AND LOWER(se.step_name) NOT LIKE '%nightly%'
ORDER BY TIME_TO_SEC(TIMEDIFF(se.end_time , se.start_time)) desc,se.start_time desc LIMIT 0,15",sep=' '))
top15steps.df <- fetch(top15steps,n=-1)
dbClearResult(dbListResults(mydb)[[1]])
top15jobs = dbSendQuery(mydb, paste("SELECT * FROM (
SELECT je.start_time, je.end_time,ji.job_name,
ji.job_name color
FROM  `cas_spr_job_execution` je,`cas_spr_job_instance` ji WHERE
ji.`job_instance_id` = je.`job_instance_id`	 AND
je.start_time > '",start.date, " 18:00:00' AND je.start_time < '",end.date ," 2:00:00'
AND LOWER(ji.job_name) NOT LIKE '%master%'
ORDER BY TIME_TO_SEC(TIMEDIFF(je.end_time , je.start_time)) DESC LIMIT 0,15
) sub ORDER BY start_time ASC",sep=' '))
top15jobs.df <- fetch(top15jobs,n=-1)
dbClearResult(dbListResults(mydb)[[1]])
topStepsData = dbSendQuery(mydb, paste("SELECT TIME_TO_SEC(TIMEDIFF(se0.end_time , se0.start_time)) AS duration,se0.step_name, DATE(se0.start_time) as start_time,se2.JobStep,`read_count`,`write_count` FROM  cas_spr_step_execution se0,
(SELECT se.step_name ,se.start_time, CONCAT(LEFT(ji.job_name,30),' :',LEFT(se.step_name,25)) AS JobStep
FROM cas_spr_step_execution se,cas_spr_job_execution je,`cas_spr_job_instance` ji
WHERE
se.`job_execution_id` = je.`job_execution_id`
AND ji.`job_instance_id` = je.`job_instance_id`
AND se.start_time > '2015-12-04 18:00:00' AND se.end_time < '2015-12-05 2:00:00'
AND LOWER(se.step_name) NOT LIKE '%master%'
AND LOWER(se.step_name) NOT LIKE '%nightly%'
AND LOWER(se.step_name) NOT LIKE '%customerpaper%'
ORDER BY  TIME_TO_SEC(TIMEDIFF(se.end_time , se.start_time)) DESC, se.start_time
LIMIT 0,5
) se2 WHERE se0.step_name = se2.step_name
AND TIME(se0.start_time) > '18:00:00' AND TIME(se0.end_time) < '2:00:00'
AND DATE(se0.start_time)  >= ADDDATE('",start.date, "',-7)
AND DATE(se0.end_time) <= '",end.date ,"'
ORDER BY se0.step_name, se0.start_time DESC",sep=' '))
topStepsData.df <- fetch(topStepsData,n=-1)
dbClearResult(dbListResults(mydb)[[1]])
# close db connection
dbDisconnect(mydb)
# load libs
library(reshape2)
library(ggplot2)
library(scales)
library(sendmailR)
top15steps.dfr <- data.frame(
name        = factor(top15steps.df[,3],levels=top15steps.df[,3]),
start.date  = as.POSIXlt(top15steps.df[,1]),
end.date    = as.POSIXlt(top15steps.df[,2]),
cus.color = top15steps.df[,4]
)
top15steps.mdfr <- melt(top15steps.dfr, measure.vars = c("start.date", "end.date"))
top15jobs.dfr <- data.frame(
name        = factor(top15jobs.df[,3],levels=top15jobs.df[,3]),
start.date  = as.POSIXlt(top15jobs.df[,1]),
end.date    = as.POSIXlt(top15jobs.df[,2]),
cus.color = top15jobs.df[,4]
)
top15jobs.mdfr <- melt(top15jobs.dfr, measure.vars = c("start.date", "end.date"))
#dev.off()
qplot(start_time,read_count,data=topStepsData.df,color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom="smooth",color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=("point","smooth"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=("points","smooth"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=("point","smooth"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom="point","smooth",color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("point","smooth"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("point","smooth"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("point","line"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("line"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("point","line"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("point","line"),method="lm",color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("point","jitter"),method="lm",color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("point","jitter"),color=step_name)
qplot(start_time,read_count,data=topStepsData.df,geom=c("point"),color=step_name)
ggplot(topStepsData.df,aes(start_time,read_count)) + geom_line()
ggplot(topStepsData.df,aes(start_time,read_count,color=step_name)) + geom_line()
ggplot(topStepsData.df,aes(start_time,read_count)) + geom_line()
ggplot(topStepsData.df,aes(start_time,read_count)) + geom_point()
ggplot(topStepsData.df,aes(start_time,read_count)) + geom_point() + color=step_name
ggplot(topStepsData.df,aes(start_time,read_count,color=step_name)) + geom_point()
ggplot(topStepsData.df,aes(start_time,read_count,color=step_name)) + geom_line()
ggplot(topStepsData.df,aes(start_time,read_count,color=step_name)) + geom_point()
ggplot(topStepsData.df,aes(start_date,read_count,color=step_name)) + geom_point()
ggplot(topStepsData.df,aes(x=start_time)) + geom_point()
ggplot2(topStepsData.df,aes(x=start_time)) + geom_point()
library(ggplot2)
ggplot(topStepsData.df,aes(x=start_time)) + geom_point()
ggplot2(topStepsData.df,aes(x=start_time)) + geom_point()
ggplot(topStepsData.df,aes(x=start_time)) + geom_point()
ggplot(topStepsData.df,aes(start_time,read_count)) + geom_line()
ggplot(topStepsData.df,aes(x=start_time)) + geom_point()
ggplot(topStepsData.df,aes(x=start_time)) + geom_point()
ggplot(topStepsData.df,aes(start_time,read_count)) + geom_line()
ggplot(topStepsData.df,aes(x=start_time,y=read_count)) + geom_line()
ggplot(topStepsData.df,aes(x=start_time,y=read_count)) + geom_line() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time)) + geom_line() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=read_count)) + geom_point() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=read_count,color=step_name)) + geom_point() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name)) + geom_point() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name)) + geom_line() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name)) + geom_point() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name)) + geom_point() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name)) + geom_point() +facet_grid(step_name ~.)
library(ggplot2)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name)) + geom_point() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name,group=step_name)) + geom_point() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name,group=step_name)) + geom_line() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name,group=step_name)) + geom_line()
ggplot(topStepsData.df,aes(x=start_time,y=duration,color=step_name,group=step_name)) + geom_line() +facet_grid(step_name ~.)
ggplot(topStepsData.df,aes(x=start_time,y=read_count,color=step_name,group=step_name)) + geom_line() +facet_grid(step_name ~.) + ylab("Read Count") + xlab("Date")
ggplot(topStepsData.df,aes(x=start_time,y=read_count,color=step_name,group=step_name)) + geom_line()+ geom_line(y=write_count) +facet_grid(step_name ~.) + ylab("Read Count") + xlab("Date")
ggplot(topStepsData.df,aes(x=start_time,y=read_count,color=step_name,group=step_name)) + geom_line()+ geom_line(y=write_count) +facet_grid(step_name ~.) + ylab("Read Count") + xlab("Date")
ggplot(topStepsData.df,aes(x=start_time,y=read_count,color=step_name,group=step_name)) + geom_line()+ geom_line(aes(y=write_count)) +facet_grid(step_name ~.) + ylab("Read Count") + xlab("Date")
ggplot(topStepsData.df,aes(x=start_time,y=read_count,color=step_name,group=step_name)) + geom_line()+ geom_line(aes(y=write_count,color=step_name)) +facet_grid(step_name ~.) + ylab("Read Count") + xlab("Date")
ggplot(topStepsData.df,aes(x=start_time,y=read_count,color=step_name,group=step_name)) + geom_line() +facet_grid(step_name ~.) + ylab("Read Count") + xlab("Date")
library(knitr)
pandoc('C:\softwares\AntScripts\BatchReportDaily.Rmd', format='html')
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
library(kintr)
library(knitr)
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd")
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='html')
library(knitr)
library(sendmailR)
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd")
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
from <- "ssing@matson.com"
to <- "ssing@matson.com"
subject <- "Batch Job Stat"
body <- "Email body."
mailControl=list(smtpServer="emailweb.matson.com")
#needs full path if not in working directory
attachmentPath <- "C:/softwares/AntScripts"
#same as attachmentPath if using working directory
attachmentName <- "BatchReportDaily.html"
#key part for attachments, put the body and the mime_part in a list for msg
attachmentObject <- mime_part(x=attachmentPath,name=attachmentName)
bodyWithAttachment <- list(body,attachmentObject)
sendmail(from=from,to=to,subject=subject,msg=bodyWithAttachment,control=mailControl)
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd")
library(knitr)
library(sendmailR)
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd")
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='html')
from <- "ssing@matson.com"
to <- "ssing@matson.com"
subject <- "Batch Job Stat"
body <- "Email body."
mailControl=list(smtpServer="emailweb.matson.com")
#needs full path if not in working directory
attachmentPath <- "C:/softwares/AntScripts"
#same as attachmentPath if using working directory
attachmentName <- "BatchReportDaily.html"
#key part for attachments, put the body and the mime_part in a list for msg
attachmentObject <- mime_part(x=attachmentPath,name=attachmentName)
bodyWithAttachment <- list(body,attachmentObject)
sendmail(from=from,to=to,subject=subject,msg=bodyWithAttachment,control=mailControl)
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd")
pandoc('C:/softwares/AntScripts/BatchReportDaily.Rmd', format='html')
??knit
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd",output = "C:/softwares/AntScripts")
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd",output = "C:/softwares/AntScripts/")
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd",output = "C:/softwares/AntScripts/test.md")
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd",output = "C:/softwares/AntScripts/BatchReportDaily.md")
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='html')
library(knitr)
library(sendmailR)
knit("C:/softwares/AntScripts/BatchReportDaily.Rmd",output = "C:/softwares/AntScripts/BatchReportDaily.md")
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='html')
from <- "ssing@matson.com"
to <- "ssing@matson.com"
subject <- "Batch Job Stat"
body <- "Email body."
mailControl=list(smtpServer="emailweb.matson.com")
#needs full path if not in working directory
attachmentPath <- "C:/softwares/AntScripts/BatchReportDaily.html"
#same as attachmentPath if using working directory
attachmentName <- "BatchReportDaily.html"
#key part for attachments, put the body and the mime_part in a list for msg
attachmentObject <- mime_part(x=attachmentPath,name=attachmentName)
bodyWithAttachment <- list(body,attachmentObject)
sendmail(from=from,to=to,subject=subject,msg=bodyWithAttachment,control=mailControl)
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='PDF')
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='pdf')
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='doc')
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='doc')
library(knitr)
pandoc('C:/softwares/AntScripts/BatchReportDaily.md', format='doc')
args=(commandArgs(TRUE))
start.date = format(Sys.Date()-1, "%Y-%m-%d")
end.date = format(Sys.Date(), "%Y-%m-%d")
library(RMySQL)
library(DBI)
library(methods)
if(length(args)==0){
#print("No arguments supplied.")
##supply default values
start.date = format(Sys.Date()-1, "%Y-%m-%d")
end.date = format(Sys.Date(), "%Y-%m-%d")
}else{
start.date="2015-11-23"
start.date="2015-11-24"
}
start.date ="2015-12-11"
end.date ="2015-12-11"
#setwd("C:/reports")
tvtime_format<-function() {
function(x) {
v<-character(length(x))
notNA<-!is.na(x)
lt <- as.POSIXlt(x[notNA])
hour <- lt$hour
min <- lt$min
v[notNA]<-sprintf("%02d:%02d", hour, min)
v
}
}
#mydb = dbConnect(MySQL(), user='gatuser', password='gatuser', dbname='gatmgr2', host='10.8.7.63')
mydb = dbConnect(MySQL(), user='gatread', password='gatread_PP', dbname='gatmgr', host='10.201.1.48')
top15steps = dbSendQuery(mydb, paste("SELECT se.start_time, se.end_time, CONCAT(LEFT(ji.job_name,30),' :',LEFT(se.step_name,25)),
ji.job_name color
FROM cas_spr_step_execution se,cas_spr_job_execution je,`cas_spr_job_instance` ji
WHERE
se.`job_execution_id` = je.`job_execution_id`
AND ji.`job_instance_id` = je.`job_instance_id`
AND se.start_time > '",start.date, " 18:00:00' AND se.start_time < '",end.date ," 2:00:00'
AND LOWER(se.step_name) NOT LIKE '%master%'
AND LOWER(se.step_name) NOT LIKE '%nightly%'
ORDER BY TIME_TO_SEC(TIMEDIFF(se.end_time , se.start_time)) desc,se.start_time desc LIMIT 0,15",sep=' '))
top15steps.df <- fetch(top15steps,n=-1)
dbClearResult(dbListResults(mydb)[[1]])
top15jobs = dbSendQuery(mydb, paste("SELECT * FROM (
SELECT je.start_time, je.end_time,ji.job_name,
ji.job_name color
FROM  `cas_spr_job_execution` je,`cas_spr_job_instance` ji WHERE
ji.`job_instance_id` = je.`job_instance_id`	 AND
TIME_TO_SEC(TIMEDIFF(je.end_time , je.start_time)) > 300 AND
je.start_time > '",start.date, " 18:00:00' AND je.start_time < '",end.date ," 2:00:00'
AND LOWER(ji.job_name) NOT LIKE '%master%'
ORDER BY TIME_TO_SEC(TIMEDIFF(je.end_time , je.start_time)) DESC LIMIT 0,15
) sub ORDER BY start_time ASC",sep=' '))
top15jobs.df <- fetch(top15jobs,n=-1)
dbClearResult(dbListResults(mydb)[[1]])
topStepsData = dbSendQuery(mydb, paste("SELECT TIME_TO_SEC(TIMEDIFF(se0.end_time , se0.start_time))/60 AS duration,se0.step_name, DATE(se0.start_time) as start_time,se2.JobStep,`read_count`,`write_count` FROM  cas_spr_step_execution se0,
(SELECT se.step_name ,se.start_time, CONCAT(LEFT(ji.job_name,30),' :',LEFT(se.step_name,25)) AS JobStep
FROM cas_spr_step_execution se,cas_spr_job_execution je,`cas_spr_job_instance` ji
WHERE
se.`job_execution_id` = je.`job_execution_id`
AND ji.`job_instance_id` = je.`job_instance_id`
AND se.start_time > '",start.date, " 18:00:00' AND se.start_time < '",end.date ," 2:00:00'
AND LOWER(se.step_name) NOT LIKE '%master%'
AND LOWER(se.step_name) NOT LIKE '%nightly%'
AND LOWER(se.step_name) NOT LIKE '%customerpaper%'
ORDER BY  TIME_TO_SEC(TIMEDIFF(se.end_time , se.start_time)) DESC, se.start_time
LIMIT 0,5
) se2 WHERE se0.step_name = se2.step_name
AND TIME(se0.start_time) > '18:00:00' AND TIME(se0.end_time) < '2:00:00'
AND DATE(se0.start_time)  >= ADDDATE('",start.date, "',-7)
AND DATE(se0.end_time) <= '",end.date ,"'
ORDER BY se0.step_name, se0.start_time DESC",sep=' '))
topStepsData.df <- fetch(topStepsData,n=-1)
dbClearResult(dbListResults(mydb)[[1]])
# close db connection
dbDisconnect(mydb)
# load libs
library(reshape2)
library(ggplot2)
library(scales)
library(sendmailR)
top15steps.dfr <- data.frame(
name        = factor(top15steps.df[,3],levels=top15steps.df[,3]),
start.date  = as.POSIXlt(top15steps.df[,1]),
end.date    = as.POSIXlt(top15steps.df[,2]),
cus.color = top15steps.df[,4]
)
top15steps.mdfr <- melt(top15steps.dfr, measure.vars = c("start.date", "end.date"))
top15jobs.dfr <- data.frame(
name        = factor(top15jobs.df[,3],levels=top15jobs.df[,3]),
start.date  = as.POSIXlt(top15jobs.df[,1]),
end.date    = as.POSIXlt(top15jobs.df[,2]),
cus.color = top15jobs.df[,4]
)
top15jobs.mdfr <- melt(top15jobs.dfr, measure.vars = c("start.date", "end.date"))
#dev.off()
library(knitr)
library(sendmailR)
library(rmarkdown)
setwd("C:/softwares/AntScripts")
render("BatchReportDaily.Rmd")
from <- "ssing@matson.com"
to <- "ssing@matson.com"
subject <- "Batch Job Stat"
message <- "Email body.<b> Test</b>"
msg <- mime_part(message)
msg[["headers"]][["Content-Type"]] <- "text/html"
body <- msg
mailControl=list(smtpServer="emailweb.matson.com")
#needs full path if not in working directory
attachmentPath <- "C:/softwares/AntScripts/BatchReportDaily.pdf"
#same as attachmentPath if using working directory
attachmentName <- "BatchReportDaily.pdf"
#key part for attachments, put the body and the mime_part in a list for msg
attachmentObject <- mime_part(x=attachmentPath,name=attachmentName)
bodyWithAttachment <- list(body,attachmentObject)
sendmail(from=from,to=to,subject=subject,msg=bodyWithAttachment,control=mailControl)
library(knitr)
library(sendmailR)
library(rmarkdown)
setwd("C:/softwares/AntScripts")
render("BatchReportDaily.Rmd")
from <- "ssing@matson.com"
to <- "ssing@matson.com"
subject <- "Batch Job Stat"
message <- "Email body.<b> Test</b>"
msg <- mime_part(message)
msg[["headers"]][["Content-Type"]] <- "text/html"
body <- msg
mailControl=list(smtpServer="emailweb.matson.com")
#needs full path if not in working directory
attachmentPath <- "C:/softwares/AntScripts/BatchReportDaily.pdf"
#same as attachmentPath if using working directory
attachmentName <- "BatchReportDaily.pdf"
#key part for attachments, put the body and the mime_part in a list for msg
attachmentObject <- mime_part(x=attachmentPath,name=attachmentName)
bodyWithAttachment <- list(body,attachmentObject)
sendmail(from=from,to=to,subject=subject,msg=bodyWithAttachment,control=mailControl)
